<?php


namespace Formy\Tests\FieldsTests\ChoiceTests;


use Formy\Providers\FormyServiceProvider;
use Formy\Tests\Database\migrations\CreateUnicornsHeadTable;
use Formy\Tests\Database\migrations\CreateUnicornsTailTable;
use Formy\Tests\Database\Models\UnicornHead;
use Formy\Tests\Database\Models\UnicornTail;
use Formy\Tests\Traits\LoadMigration;
use Illuminate\Contracts\Auth\Authenticatable as UserContract;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Orchestra\Testbench\TestCase;

class ChoiceFieldTest extends TestCase
{

    use RefreshDatabase;
    use LoadMigration;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->withFactories(__DIR__ . '/../../Database/factories');
    }

    protected function getPackageProviders($app)
    {
        return [ FormyServiceProvider::class ];
    }

    protected function getEnvironmentSetUp($app)
    {
        $this->loadMigration(CreateUnicornsHeadTable::class);
        $this->loadMigration(CreateUnicornsTailTable::class);

        (new CreateUnicornsHeadTable())->up();
        (new CreateUnicornsTailTable())->up();
    }


    /**
     * @123test
     */
    public function canAttachChildToTheObject()
    {
        $unicornHead = factory(UnicornHead::class)->create();
        $unicornTail = factory(UnicornTail::class)->create();
        $newUnicornTail = factory(UnicornTail::class)->create();

        $headForm = ChoiceEntryForm::create($unicornHead);

        $requestData = [
            'head' => [
                'title' => 'New title',
                'tail' => $unicornTail->id
            ]
        ];

        $headForm->handle($requestData);
        $loadedTail = UnicornHead::first()->tail;
        $this->assertEquals(1, $loadedTail->count());
        $this->assertEquals($unicornTail->id, $loadedTail->last()->id);

        $requestData = [
            'head' => [
                'title' => 'New title',
                'tail' => $newUnicornTail->id
            ]
        ];

        $headForm->handle($requestData);

        $loadedTail = UnicornHead::first()->tail;
        $this->assertEquals(2, $loadedTail->count());
        $this->assertEquals($newUnicornTail->id, $loadedTail->last()->id);
    }

    /**
     * @test
     */
    public function canAttachMultipleChildsToTheObjectAtOnce()
    {
        $unicornHead = factory(UnicornHead::class)->create();
        $unicornTail = factory(UnicornTail::class)->create();
        $secondUnicornTail = factory(UnicornTail::class)->create();
        $thirdUnicornTail = factory(UnicornTail::class)->create();

        /** @var ChoiceEntryForm $form */
        $form = ChoiceEntryForm::create($unicornHead);
        $form->setIsMultiple(true);

        $neededTailIds = [$unicornTail->id, $thirdUnicornTail->id];
        $request = [
            'head' => [
                'title' => 'New title',
                'tail' => $neededTailIds
            ]
        ];

        $form->handle($request);
        $loadedTail = UnicornHead::first()->tail;
        $loadedTailIds = $loadedTail->pluck('id')->toArray();

        $this->assertEquals(2, $loadedTail->count());
        $this->assertEquals($neededTailIds, $loadedTailIds);
    }

}
